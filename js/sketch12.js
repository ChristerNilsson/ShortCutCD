// Generated by CoffeeScript 2.4.1
var ADD, CHOICES, COLS, COST, DIV, MAX, MUL, PLAYERS, Player, ROWS, createTarget, d, draw, keyPressed, level, myRandint, myRandom, myRound, newGame, players, seed, setup, solution, target;

ROWS = 3;

COLS = 4;

CHOICES = [];

ADD = 2;

MUL = 2;

DIV = 2;

MAX = 20;

COST = 10;

PLAYERS = 12;

level = 1;

players = [];

target = 0;

solution = null;

d = new Date();

seed = 60 * d.getHours() + d.getMinutes();

myRandom = function() {
  var x;
  x = 10000 * Math.sin(seed++);
  return x - Math.floor(x);
};

myRandint = function(a, b) {
  return int(a + (b - a) * myRandom());
};

Player = class Player {
  constructor(start1, row1, col1, keys1) {
    this.start = start1;
    this.row = row1;
    this.col = col1;
    this.keys = keys1;
    this.bg = (this.row + this.col) % 2 === 0 ? "#ff0" : "#f00";
    this.w = width * 0.25;
    this.left = this.w * this.col;
    this.xmiddle = this.left + this.w / 2;
    this.h = height * 0.25;
    this.up = this.h * this.row;
    this.ymiddle = this.up + this.h / 2;
    this.history = [];
    this.tid = 0;
    this.startTid = new Date();
    this.index = 0;
  }

  draw() {
    if (this.start === target) {
      fill("#0f0");
      textSize(0.05 * height);
      textAlign(CENTER, CENTER);
      sc(0);
      rect(this.left, this.up, this.w, this.h);
      fc(0);
      sc();
      text(this.keys, this.xmiddle, this.ymiddle);
      return text(this.tid, this.xmiddle, this.ymiddle + 0.25 * this.h);
    } else {
      fill(this.bg);
      textSize(0.05 * height);
      textAlign(CENTER, CENTER);
      sc(0);
      rect(this.left, this.up, this.w, this.h);
      fc(0);
      sc();
      text(this.start, this.xmiddle, this.ymiddle - 0.25 * this.h);
      text(this.keys, this.xmiddle, this.ymiddle);
      return text(CHOICES[this.index], this.xmiddle, this.ymiddle + 0.25 * this.h);
    }
  }

  operate(newValue) {
    this.history.push(this.start);
    this.start = newValue;
    if (this.start === target) {
      return this.stoppTid = new Date();
    }
  }

  click(key) {
    var keys;
    if (this.start === target) {
      return;
    }
    keys = _.clone(this.keys);
    key = key.toUpperCase();
    if (key === keys[0].toUpperCase()) {
      this.index = (this.index + 1) % CHOICES.length;
    }
    if (key === keys[1].toUpperCase()) {
      if (this.index === 0 && this.history.length > 0) {
        this.start = this.history.pop();
      }
      if (this.index === 1) {
        this.operate(this.start * MUL);
      }
      if (this.index === 2) {
        this.operate(this.start + ADD);
      }
      if (this.index === 3 && this.start % DIV === 0) {
        this.operate(this.start / DIV);
      }
    }
    if (this.start === target) {
      this.stoppTid = new Date();
      return this.tid = myRound((this.stoppTid - this.startTid) / 1000 + COST * this.history.length, 3);
    }
  }

};

myRound = function(x, n) {
  return round(x * 10 ** n) / 10 ** n;
};

createTarget = function(level, start) {
  var a, b, comeFrom, i, j, k, len, len1, nr, op, ref, result;
  op = function(from, nr) {
    if (!(nr in comeFrom)) {
      b.push(nr);
      return comeFrom[nr] = from;
    }
  };
  a = [start];
  comeFrom = {};
  comeFrom[start] = 0;
  ref = range(level);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    b = [];
    for (k = 0, len1 = a.length; k < len1; k++) {
      nr = a[k];
      op(nr, nr + ADD);
      op(nr, nr * MUL);
      if (nr % DIV === 0) {
        op(nr, nr / DIV);
      }
    }
    a = _.uniq(b);
  }
  target = a[myRandint(0, a.length)];
  result = [];
  while (target !== 0) {
    result.unshift(target);
    target = comeFrom[target];
  }
  console.log(comeFrom);
  return result;
};

newGame = function(delta = 0) {
  var col, i, j, keys, len, ref, results, row, start, startTid;
  players = [];
  level += delta;
  if (level < 1) {
    level = 1;
  }
  startTid = new Date();
  start = myRandint(1, MAX);
  solution = createTarget(level, start);
  target = _.last(solution);
  keys = 'QWERTYUIASDFGHJKZXCVBNM,';
  if (PLAYERS === 2) {
    keys = 'QWIO';
  }
  if (PLAYERS === 3) {
    keys = 'QWTYOP';
  }
  ref = range(PLAYERS);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    row = floor(i / 4);
    col = i % 4;
    results.push(players.push(new Player(start, row, col, keys[2 * i] + keys[2 * i + 1])));
  }
  return results;
};

setup = function() {
  var params;
  createCanvas(windowWidth, windowHeight);
  params = _.extend({
    ADD: 2,
    MUL: 2,
    DIV: 2,
    MAX: 20,
    COST: 10,
    PLAYERS: 12
  }, getParameters());
  ADD = int(params.ADD);
  MUL = int(params.MUL);
  DIV = int(params.DIV);
  MAX = int(params.MAX);
  COST = int(params.COST);
  PLAYERS = int(params.PLAYERS);
  CHOICES = `undo *${MUL} +${ADD} /${DIV}`.split(' ');
  return newGame();
};

draw = function() {
  var j, len, player;
  bg(1);
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    player.draw();
  }
  sc();
  text(target, width * 0.5, 0.75 * height + 0.33 * players[0].h);
  text(`level: ${level}`, width * 0.5, 0.75 * height + 0.67 * players[0].h);
  return text(`seed: ${seed}`, width * 0.25, 0.75 * height + 0.67 * players[0].h);
};

keyPressed = function() {
  var j, len, player, results;
  if (key === 'Enter') {
    return console.log(solution);
  } else if (key === "ArrowUp") {
    return newGame(1);
  } else if (key === "ArrowDown") {
    return newGame(-1);
  } else {
    results = [];
    for (j = 0, len = players.length; j < len; j++) {
      player = players[j];
      results.push(player.click(key));
    }
    return results;
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoMTIuanMiLCJzb3VyY2VSb290IjoiLi4iLCJzb3VyY2VzIjpbImNvZmZlZVxcc2tldGNoMTIuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxJQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLElBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxZQUFBLEVBQUEsQ0FBQSxFQUFBLElBQUEsRUFBQSxVQUFBLEVBQUEsS0FBQSxFQUFBLFNBQUEsRUFBQSxRQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxRQUFBLEVBQUE7O0FBQUEsSUFBQSxHQUFPOztBQUNQLElBQUEsR0FBTzs7QUFDUCxPQUFBLEdBQVU7O0FBRVYsR0FBQSxHQUFNOztBQUNOLEdBQUEsR0FBTTs7QUFDTixHQUFBLEdBQU07O0FBQ04sR0FBQSxHQUFNOztBQUNOLElBQUEsR0FBTzs7QUFDUCxPQUFBLEdBQVU7O0FBRVYsS0FBQSxHQUFROztBQUNSLE9BQUEsR0FBVTs7QUFDVixNQUFBLEdBQVM7O0FBQ1QsUUFBQSxHQUFXOztBQUVYLENBQUEsR0FBSSxJQUFJLElBQUosQ0FBQTs7QUFDSixJQUFBLEdBQU8sRUFBQSxHQUFHLENBQUMsQ0FBQyxRQUFGLENBQUEsQ0FBSCxHQUFrQixDQUFDLENBQUMsVUFBRixDQUFBOztBQUV6QixRQUFBLEdBQVcsUUFBQSxDQUFBLENBQUE7QUFDVixNQUFBO0VBQUEsQ0FBQSxHQUFJLEtBQUEsR0FBUSxJQUFJLENBQUMsR0FBTCxDQUFTLElBQUEsRUFBVDtTQUNaLENBQUEsR0FBSSxJQUFJLENBQUMsS0FBTCxDQUFXLENBQVg7QUFGTTs7QUFJWCxTQUFBLEdBQVksUUFBQSxDQUFDLENBQUQsRUFBRyxDQUFILENBQUE7U0FDWCxHQUFBLENBQUksQ0FBQSxHQUFJLENBQUMsQ0FBQSxHQUFFLENB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XHJcbkNIT0lDRVMgPSBbXSBcclxuXHJcbkFERCA9IDJcclxuTVVMID0gMlxyXG5ESVYgPSAyXHJcbk1BWCA9IDIwXHJcbkNPU1QgPSAxMFxyXG5QTEFZRVJTID0gMTJcclxuXHJcbmxldmVsID0gMVxyXG5wbGF5ZXJzID0gW11cclxudGFyZ2V0ID0gMFxyXG5zb2x1dGlvbiA9IG51bGxcclxuXHJcbmQgPSBuZXcgRGF0ZSgpXHJcbnNlZWQgPSA2MCpkLmdldEhvdXJzKCkgKyBkLmdldE1pbnV0ZXMoKVxyXG5cclxubXlSYW5kb20gPSAtPlxyXG5cdHggPSAxMDAwMCAqIE1hdGguc2luIHNlZWQrK1xyXG5cdHggLSBNYXRoLmZsb29yIHhcclxuXHJcbm15UmFuZGludCA9IChhLGIpIC0+XHJcblx0aW50IGEgKyAoYi1hKSAqIG15UmFuZG9tKClcclxuXHJcbmNsYXNzIFBsYXllclxyXG5cdGNvbnN0cnVjdG9yIDogKEBzdGFydCwgQHJvdywgQGNvbCwgQGtleXMpIC0+XHJcblx0XHRAYmcgPSBpZiAoQHJvdytAY29sKSAlIDIgPT0gMCB0aGVuIFwiI2ZmMFwiIGVsc2UgXCIjZjAwXCJcclxuXHJcblx0XHRAdyA9IHdpZHRoICogMC4yNVxyXG5cdFx0QGxlZnQgPSBAdyAqIEBjb2wgXHJcblx0XHRAeG1pZGRsZSA9IEBsZWZ0ICsgQHcgLyAyXHJcblxyXG5cdFx0QGggPSBoZWlnaHQgKiAwLjI1XHJcblx0XHRAdXAgPSBAaCAqIEByb3dcclxuXHRcdEB5bWlkZGxlID0gQHVwICsgQGggLyAyXHJcblxyXG5cdFx0QGhpc3RvcnkgPSBbXVxyXG5cdFx0QHRpZCA9IDBcclxuXHRcdEBzdGFydFRpZCA9IG5ldyBEYXRlKClcclxuXHJcblx0XHRAaW5kZXggPSAwXHJcblxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0aWYgQHN0YXJ0ID09IHRhcmdldFxyXG5cdFx0XHRmaWxsIFwiIzBmMFwiXHJcblx0XHRcdHRleHRTaXplIDAuMDUqaGVpZ2h0XHJcblx0XHRcdHRleHRBbGlnbiBDRU5URVIsQ0VOVEVSXHJcblx0XHRcdHNjIDBcclxuXHRcdFx0cmVjdCBAbGVmdCxAdXAsQHcsQGhcclxuXHRcdFx0ZmMgMFxyXG5cdFx0XHRzYygpXHJcblx0XHRcdHRleHQgQGtleXMsIEB4bWlkZGxlLCBAeW1pZGRsZVxyXG5cdFx0XHR0ZXh0IEB0aWQsICBAeG1pZGRsZSwgQHltaWRkbGUrMC4yNSpAaFxyXG5cdFx0ZWxzZVxyXG5cdFx0XHRmaWxsIEBiZ1xyXG5cdFx0XHR0ZXh0U2l6ZSAwLjA1KmhlaWdodFxyXG5cdFx0XHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdFx0XHRzYyAwXHJcblx0XHRcdHJlY3QgQGxlZnQsQHVwLEB3LEBoXHJcblx0XHRcdGZjIDBcclxuXHRcdFx0c2MoKVxyXG5cdFx0XHR0ZXh0IEBzdGFydCwgICAgICAgICAgQHhtaWRkbGUsIEB5bWlkZGxlLTAuMjUqQGhcclxuXHRcdFx0dGV4dCBAa2V5cywgICAgICAgICAgIEB4bWlkZGxlLCBAeW1pZGRsZVxyXG5cdFx0XHR0ZXh0IENIT0lDRVNbQGluZGV4XSwgQHhtaWRkbGUsIEB5bWlkZGxlKzAuMjUqQGhcclxuXHJcblx0b3BlcmF0ZSA6IChuZXdWYWx1ZSkgLT5cclxuXHRcdEBoaXN0b3J5LnB1c2ggQHN0YXJ0XHJcblx0XHRAc3RhcnQgPSBuZXdWYWx1ZVxyXG5cdFx0aWYgQHN0YXJ0ID09IHRhcmdldCB0aGVuIEBzdG9wcFRpZCA9IG5ldyBEYXRlKClcclxuXHJcblx0Y2xpY2sgOiAoa2V5KSAtPlxyXG5cdFx0aWYgQHN0YXJ0ID09IHRhcmdldCB0aGVuIHJldHVyblx0XHRcclxuXHRcdGtleXMgPSBfLmNsb25lIEBrZXlzXHJcblx0XHRrZXkgPSBrZXkudG9VcHBlckNhc2UoKVxyXG5cdFx0aWYga2V5ID09IGtleXNbMF0udG9VcHBlckNhc2UoKSB0aGVuIEBpbmRleCA9IChAaW5kZXggKyAxKSAlIENIT0lDRVMubGVuZ3RoXHJcblx0XHRpZiBrZXkgPT0ga2V5c1sxXS50b1VwcGVyQ2FzZSgpIFxyXG5cdFx0XHRpZiBAaW5kZXggPT0gMCBhbmQgQGhpc3RvcnkubGVuZ3RoID4gMCB0aGVuIEBzdGFydCA9IEBoaXN0b3J5LnBvcCgpXHJcblx0XHRcdGlmIEBpbmRleCA9PSAxIHRoZW5cdEBvcGVyYXRlIEBzdGFydCAqIE1VTFxyXG5cdFx0XHRpZiBAaW5kZXggPT0gMiB0aGVuXHRAb3BlcmF0ZSBAc3RhcnQgKyBBRERcclxuXHRcdFx0aWYgQGluZGV4ID09IDMgYW5kIEBzdGFydCAlIERJViA9PSAwIHRoZW4gQG9wZXJhdGUgQHN0YXJ0IC8gRElWXHJcblxyXG5cdFx0aWYgQHN0YXJ0ID09IHRhcmdldFxyXG5cdFx0XHRAc3RvcHBUaWQgPSBuZXcgRGF0ZSgpXHJcblx0XHRcdEB0aWQgPSBteVJvdW5kIChAc3RvcHBUaWQgLSBAc3RhcnRUaWQpLzEwMDAgKyBDT1NUICogQGhpc3RvcnkubGVuZ3RoLCAzXHJcblxyXG5teVJvdW5kID0gKHgsbikgLT4gcm91bmQoeCoxMCoqbikvMTAqKm5cclxuXHJcbmNyZWF0ZVRhcmdldCA9IChsZXZlbCwgc3RhcnQpIC0+XHJcblx0b3AgPSAoZnJvbSxucikgLT5cclxuXHRcdGlmIG5yIG5vdCBvZiBjb21lRnJvbVxyXG5cdFx0XHRiLnB1c2ggbnJcclxuXHRcdFx0Y29tZUZyb21bbnJdID0gZnJvbVxyXG5cdGEgPSBbc3RhcnRdXHJcblx0Y29tZUZyb20gPSB7fVxyXG5cdGNvbWVGcm9tW3N0YXJ0XSA9IDBcclxuXHRmb3IgaSBpbiByYW5nZSBsZXZlbFxyXG5cdFx0YiA9IFtdXHJcblx0XHRmb3IgbnIgaW4gYVxyXG5cdFx0XHRvcCBucixuciArIEFERCBcclxuXHRcdFx0b3AgbnIsbnIgKiBNVUxcclxuXHRcdFx0aWYgbnIgJSBESVYgPT0gMCB0aGVuIG9wIG5yLG5yIC8gRElWIFxyXG5cdFx0YSA9IF8udW5pcSBiXHJcblx0dGFyZ2V0ID0gYVtteVJhbmRpbnQgMCxhLmxlbmd0aF1cclxuXHRyZXN1bHQgPSBbXVxyXG5cdHdoaWxlIHRhcmdldCAhPSAwXHJcblx0XHRyZXN1bHQudW5zaGlmdCB0YXJnZXRcclxuXHRcdHRhcmdldCA9IGNvbWVGcm9tW3RhcmdldF1cclxuXHRjb25zb2xlLmxvZyBjb21lRnJvbVxyXG5cdHJlc3VsdFxyXG5cclxubmV3R2FtZSA9IChkZWx0YT0wKSAtPlxyXG5cdHBsYXllcnMgPSBbXVxyXG5cdGxldmVsICs9IGRlbHRhXHJcblx0aWYgbGV2ZWwgPCAxIHRoZW4gbGV2ZWwgPSAxXHJcblx0c3RhcnRUaWQgPSBuZXcgRGF0ZSgpXHJcblx0c3RhcnQgPSBteVJhbmRpbnQgMSxNQVhcclxuXHRzb2x1dGlvbiA9IGNyZWF0ZVRhcmdldCBsZXZlbCwgc3RhcnRcclxuXHR0YXJnZXQgPSBfLmxhc3Qgc29sdXRpb25cclxuXHRrZXlzID0gJ1FXRVJUWVVJQVNERkdISktaWENWQk5NLCdcclxuXHRpZiBQTEFZRVJTID09IDIgdGhlbiBrZXlzID0gJ1FXSU8nXHJcblx0aWYgUExBWUVSUyA9PSAzIHRoZW4ga2V5cyA9ICdRV1RZT1AnXHJcblx0Zm9yIGkgaW4gcmFuZ2UgUExBWUVSU1xyXG5cdFx0cm93ID0gZmxvb3IgaSAvIDRcclxuXHRcdGNvbCA9IGkgJSA0XHJcblx0XHRwbGF5ZXJzLnB1c2ggbmV3IFBsYXllciBzdGFydCxyb3csY29sLCBrZXlzWzIqaV0gKyBrZXlzWzIqaSsxXVxyXG5cclxuc2V0dXAgPSAtPlxyXG5cdGNyZWF0ZUNhbnZhcyB3aW5kb3dXaWR0aCx3aW5kb3dIZWlnaHRcclxuXHRwYXJhbXMgPSBfLmV4dGVuZCB7QUREOjIsIE1VTDoyLCBESVY6MiwgTUFYOjIwLCBDT1NUOjEwLCBQTEFZRVJTOjEyfSwgZ2V0UGFyYW1ldGVycygpXHJcblx0QUREID0gaW50IHBhcmFtcy5BRERcclxuXHRNVUwgPSBpbnQgcGFyYW1zLk1VTFxyXG5cdERJViA9IGludCBwYXJhbXMuRElWXHJcblx0TUFYID0gaW50IHBhcmFtcy5NQVhcclxuXHRDT1NUID0gaW50IHBhcmFtcy5DT1NUXHJcblx0UExBWUVSUyA9IGludCBwYXJhbXMuUExBWUVSU1xyXG5cdENIT0lDRVMgPSBcInVuZG8gKiN7TVVMfSArI3tBRER9IC8je0RJVn1cIi5zcGxpdCAnICdcclxuXHRuZXdHYW1lKClcclxuXHJcbmRyYXcgPSAtPlxyXG5cdGJnIDFcclxuXHRwbGF5ZXIuZHJhdygpIGZvciBwbGF5ZXIgaW4gcGxheWVyc1xyXG5cdHNjKClcclxuXHR0ZXh0IHRhcmdldCwgd2lkdGggKiAwLjUsIDAuNzUqaGVpZ2h0ICsgMC4zMypwbGF5ZXJzWzBdLmhcclxuXHR0ZXh0IFwibGV2ZWw6ICN7bGV2ZWx9XCIsIHdpZHRoICogMC41LCAwLjc1KmhlaWdodCArIDAuNjcqcGxheWVyc1swXS5oXHJcblx0dGV4dCBcInNlZWQ6ICN7c2VlZH1cIiwgd2lkdGggKiAwLjI1LCAwLjc1KmhlaWdodCArIDAuNjcqcGxheWVyc1swXS5oXHJcblxyXG5rZXlQcmVzc2VkID0gLT4gXHJcblx0aWYga2V5ID09ICdFbnRlcicgdGhlbiBjb25zb2xlLmxvZyBzb2x1dGlvblxyXG5cdGVsc2UgaWYga2V5ID09IFwiQXJyb3dVcFwiIHRoZW4gbmV3R2FtZSAxXHJcblx0ZWxzZSBpZiBrZXkgPT0gXCJBcnJvd0Rvd25cIiB0aGVuIG5ld0dhbWUgLTFcclxuXHRlbHNlIHBsYXllci5jbGljayBrZXkgZm9yIHBsYXllciBpbiBwbGF5ZXJzXHJcbiJdfQ==
//# sourceURL=c:\github\ShortCutCD\coffee\sketch12.coffee