// Generated by CoffeeScript 2.4.1
var Button, KEYS, Player, buttons, createTarget, d, draw, fract, keyPressed, level, mousePressed, myRandint, myRandom, newGame, players, seed, setup,
  indexOf = [].indexOf;

KEYS = "undo +2 *2 /2".split(' ');

level = 0;

players = [];

buttons = [];

// to make this multiplayer with Browser Preview
d = new Date();

seed = 60 * d.getHours() + d.getMinutes();

fract = function(x) {
  return x - Math.floor(x);
};

myRandom = function() {
  return fract(10000 * Math.sin(seed++));
};

myRandint = function(a, b) {
  return int(a + (b - a) * myRandom());
};

Button = class Button {
  constructor(x1, y, prompt, click) {
    this.x = x1;
    this.y = y;
    this.prompt = prompt;
    this.click = click;
    this.x *= width;
    this.y *= height;
    this.r = 0.07 * height;
  }

  draw() {
    fc();
    sc(0);
    circle(this.x, this.y, this.r);
    fc(0);
    sc();
    return text(this.prompt, this.x, this.y);
  }

  inside(mx, my) {
    return dist(mx, my, this.x, this.y) < this.r;
  }

};

Player = class Player {
  constructor(start1, target1, left, right, bg1, name) {
    var x;
    this.start = start1;
    this.target = target1;
    this.left = left;
    this.right = right;
    this.bg = bg1;
    this.name = name;
    this.history = [];
    this.tid = 0;
    this.middle = (this.left + this.right) / 2;
    this.startTid = new Date();
    x = this.middle;
    this.count = 0;
    buttons.push(new Button(x, 0.51, KEYS[0], () => {
      return this.click(0);
    }));
    buttons.push(new Button(x, 0.65, KEYS[1], () => {
      return this.click(1);
    }));
    buttons.push(new Button(x, 0.79, KEYS[2], () => {
      return this.click(2);
    }));
    buttons.push(new Button(x, 0.93, KEYS[3], () => {
      return this.click(3);
    }));
  }

  draw() {
    if (this.start === this.target) {
      fill("#0f0");
    } else {
      fill(this.bg);
    }
    textSize(0.04 * height);
    textAlign(CENTER, CENTER);
    rect(this.left * width, 0, width * (this.right - this.left), height);
    fc(0);
    text(this.name, width * this.middle, 0.05 * height);
    text(this.start, width * this.middle, 0.15 * height);
    text(this.target, width * this.middle, 0.20 * height);
    text(level - this.history.length, width * this.middle, 0.30 * height);
    return text(this.tid / 1000, width * this.middle, 0.40 * height);
  }

  operate(newValue) {
    this.count++;
    this.history.push(this.start);
    this.start = newValue;
    if (this.start === this.target) {
      return this.stoppTid = new Date();
    }
  }

  click(index) {
    if (this.start === this.target) {
      return;
    }
    if (index === 0 && this.history.length > 0) {
      this.start = this.history.pop();
    }
    if (index === 1) {
      this.operate(this.start + 2);
    }
    if (index === 2) {
      this.operate(this.start * 2);
    }
    if (index === 3 && this.start % 2 === 0) {
      this.operate(this.start / 2);
    }
    if (this.start === this.target) {
      this.stoppTid = new Date();
      return this.tid = this.stoppTid - this.startTid + 10000 * this.count; //history.length
    }
  }

};

createTarget = function(level, start) {
  var a, b, i, j, k, len, len1, nr, op, ref, visited;
  op = function(nr) {
    if (indexOf.call(visited, nr) < 0) {
      return b.push(nr);
    }
  };
  a = [start];
  visited = [start];
  ref = range(level);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    b = [];
    for (k = 0, len1 = a.length; k < len1; k++) {
      nr = a[k];
      op(nr + 2);
      op(nr * 2);
      if (nr % 2 === 0) {
        op(nr / 2);
      }
    }
    b = _.uniq(b);
    visited = visited.concat(b);
    [a, b] = [b, a];
  }
  return a[myRandint(0, a.length - 1)];
};

setup = function() {
  createCanvas(windowWidth, windowHeight);
  return newGame(1);
};

draw = function() {
  var button, j, k, len, len1, player, results;
  bg(1);
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    player.draw();
  }
  results = [];
  for (k = 0, len1 = buttons.length; k < len1; k++) {
    button = buttons[k];
    results.push(button.draw());
  }
  return results;
};

newGame = function(delta) {
  var start, startTid, target;
  level += delta;
  if (level === 0) {
    level = 1;
  }
  startTid = new Date();
  start = myRandint(1, 20);
  target = createTarget(level, start);
  players = [];
  players.push(new Player(start, target, 0.00, 0.10, "#ff0", 'Alex'));
  players.push(new Player(start, target, 0.10, 0.20, "#f00", 'Lowe'));
  players.push(new Player(start, target, 0.20, 0.30, "#f0f", 'Mark'));
  players.push(new Player(start, target, 0.30, 0.40, "#0ff", 'Tim'));
  players.push(new Player(start, target, 0.40, 0.50, "#ff0", 'Christer'));
  players.push(new Player(start, target, 0.50, 0.60, "#f00", 'F'));
  players.push(new Player(start, target, 0.60, 0.70, "#f0f", 'G'));
  players.push(new Player(start, target, 0.70, 0.80, "#0ff", 'H'));
  players.push(new Player(start, target, 0.80, 0.90, "#f0f", 'I'));
  return players.push(new Player(start, target, 0.90, 1.00, "#0ff", 'J'));
};

keyPressed = function() {
  if (key === ' ') {
    newGame(0);
  }
  if (indexOf.call('uU+', key) >= 0) {
    newGame(1);
  }
  if (indexOf.call('dD-', key) >= 0) {
    return newGame(-1);
  }
};

mousePressed = function() {
  var button, j, len, results;
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      results.push(button.click());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsTUFBQSxFQUFBLElBQUEsRUFBQSxNQUFBLEVBQUEsT0FBQSxFQUFBLFlBQUEsRUFBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUEsRUFBQSxVQUFBLEVBQUEsS0FBQSxFQUFBLFlBQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSxFQUFBLE9BQUEsRUFBQSxPQUFBLEVBQUEsSUFBQSxFQUFBLEtBQUE7RUFBQTs7QUFBQSxJQUFBLEdBQU8sZUFBZSxDQUFDLEtBQWhCLENBQXNCLEdBQXRCOztBQUVQLEtBQUEsR0FBUTs7QUFDUixPQUFBLEdBQVU7O0FBQ1YsT0FBQSxHQUFVLEdBSlY7OztBQU9BLENBQUEsR0FBSSxJQUFJLElBQUosQ0FBQTs7QUFDSixJQUFBLEdBQU8sRUFBQSxHQUFHLENBQUMsQ0FBQyxRQUFGLENBQUEsQ0FBSCxHQUFrQixDQUFDLENBQUMsVUFBRixDQUFBOztBQUN6QixLQUFBLEdBQVEsUUFBQSxDQUFDLENBQUQsQ0FBQTtTQUFPLENBQUEsR0FBSSxJQUFJLENBQUMsS0FBTCxDQUFXLENBQVg7QUFBWDs7QUFDUixRQUFBLEdBQVcsUUFBQSxDQUFBLENBQUE7U0FBRyxLQUFBLENBQU0sS0FBQSxHQUFRLElBQUksQ0FBQyxHQUFMLENBQVMsSUFBQSxFQUFULENBQWQ7QUFBSDs7QUFDWCxTQUFBLEdBQVksUUFBQSxDQUFDLENBQUQsRUFBRyxDQUFILENBQUE7U0FBUyxHQUFBLENBQUksQ0FBQSxHQUFJLENBQUMsQ0FBQSxHQUFFLENBQUgsQ0FBQSxHQUFRLFFBQUEsQ0FBQSxDQUFoQjtBQUFUOztBQUVOLFNBQU4sTUFBQSxPQUFBO0VBQ0MsV0FBYyxHQUFBLEdBQUEsUUFBQSxPQUFBLENBQUE7SUFBQyxJQUFDLENBQUE7SUFBRSxJQUFDLENBQUE7SUFBRSxJQUFDLENBQUE7SUFB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Q0FBVyxLQUFYLEVBQWlCLE1BQWpCLEVBQXdCLElBQXhCLEVBQTZCLElBQTdCLEVBQW1DLE1BQW5DLEVBQTJDLEdBQTNDLENBQWI7U0FDQSxPQUFPLENBQUMsSUFBUixDQUFhLElBQUksTUFBSixDQUFXLEtBQVgsRUFBaUIsTUFBakIsRUFBd0IsSUFBeEIsRUFBNkIsSUFBN0IsRUFBbUMsTUFBbkMsRUFBMkMsR0FBM0MsQ0FBYjtBQWhCUzs7QUFrQlYsVUFBQSxHQUFhLFFBQUEsQ0FBQSxDQUFBO0VBQ1osSUFBRyxHQUFBLEtBQU8sR0FBVjtJQUFtQixPQUFBLENBQVEsQ0FBUixFQUFuQjs7RUFDQSxJQUFHLGFBQU8sS0FBUCxFQUFBLEdBQUEsTUFBSDtJQUFxQixPQUFBLENBQVEsQ0FBUixFQUFyQjs7RUFDQSxJQUFHLGFBQU8sS0FBUCxFQUFBLEdBQUEsTUFBSDtXQUFxQixPQUFBLENBQVEsQ0FBQyxDQUFULEVBQXJCOztBQUhZOztBQUtiLFlBQUEsR0FBZSxRQUFBLENBQUEsQ0FBQTtBQUNkLE1BQUEsTUFBQSxFQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7QUFBQTtFQUFBLEtBQUEseUNBQUE7O0lBQ0MsSUFBRyxNQUFNLENBQUMsTUFBUCxDQUFjLE1BQWQsRUFBcUIsTUFBckIsQ0FBSDttQkFBb0MsTUFBTSxDQUFDLEtBQVAsQ0FBQSxHQUFwQztLQUFBLE1BQUE7MkJBQUE7O0VBREQsQ0FBQTs7QUFEYyIsInNvdXJjZXNDb250ZW50IjpbIktFWVMgPSBcInVuZG8gKzIgKjIgLzJcIi5zcGxpdCAnICdcclxuXHJcbmxldmVsID0gMFxyXG5wbGF5ZXJzID0gW11cclxuYnV0dG9ucyA9IFtdXHJcblxyXG4jIHRvIG1ha2UgdGhpcyBtdWx0aXBsYXllciB3aXRoIEJyb3dzZXIgUHJldmlld1xyXG5kID0gbmV3IERhdGUoKVxyXG5zZWVkID0gNjAqZC5nZXRIb3VycygpICsgZC5nZXRNaW51dGVzKClcclxuZnJhY3QgPSAoeCkgLT4geCAtIE1hdGguZmxvb3IgeFxyXG5teVJhbmRvbSA9IC0+IGZyYWN0IDEwMDAwICogTWF0aC5zaW4gc2VlZCsrXHJcbm15UmFuZGludCA9IChhLGIpIC0+IGludCBhICsgKGItYSkgKiBteVJhbmRvbSgpXHJcblxyXG5jbGFzcyBCdXR0b25cclxuXHRjb25zdHJ1Y3RvciA6IChAeCxAeSxAcHJvbXB0LEBjbGljaykgLT5cclxuXHRcdEB4ICo9IHdpZHRoXHJcblx0XHRAeSAqPSBoZWlnaHRcclxuXHRcdEByID0gMC4wNyAqIGhlaWdodFxyXG5cdGRyYXcgOiAtPlxyXG5cdFx0ZmMoKVxyXG5cdFx0c2MgMFxyXG5cdFx0Y2lyY2xlIEB4LEB5LEByXHJcblx0XHRmYyAwXHJcblx0XHRzYygpXHJcblx0XHR0ZXh0IEBwcm9tcHQsQHgsQHlcclxuXHRpbnNpZGU6IChteCxteSkgLT4gZGlzdChteCxteSxAeCxAeSkgPCBAclxyXG5cclxuY2xhc3MgUGxheWVyXHJcblx0Y29uc3RydWN0b3IgOiAoQHN0YXJ0LCBAdGFyZ2V0LCBAbGVmdCwgQHJpZ2h0LCBAYmcsIEBuYW1lKSAtPlxyXG5cdFx0QGhpc3RvcnkgPSBbXVxyXG5cdFx0QHRpZCA9IDBcclxuXHRcdEBtaWRkbGUgPSAoQGxlZnQgKyBAcmlnaHQpIC8gMlxyXG5cdFx0QHN0YXJ0VGlkID0gbmV3IERhdGUoKVxyXG5cdFx0eCA9IEBtaWRkbGUgXHJcblx0XHRAY291bnQgPSAwXHJcblx0XHRidXR0b25zLnB1c2ggbmV3IEJ1dHRvbiB4LDAuNTEsS0VZU1swXSwgPT4gQGNsaWNrIDBcclxuXHRcdGJ1dHRvbnMucHVzaCBuZXcgQnV0dG9uIHgsMC42NSxLRVlTWzFdLCA9PiBAY2xpY2sgMVxyXG5cdFx0YnV0dG9ucy5wdXNoIG5ldyBCdXR0b24geCwwLjc5LEtFWVNbMl0sID0+IEBjbGljayAyXHJcblx0XHRidXR0b25zLnB1c2ggbmV3IEJ1dHRvbiB4LDAuOTMsS0VZU1szXSwgPT4gQGNsaWNrIDNcclxuXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRpZiBAc3RhcnQ9PUB0YXJnZXQgdGhlbiBmaWxsIFwiIzBmMFwiIGVsc2UgZmlsbCBAYmdcclxuXHRcdHRleHRTaXplIDAuMDQqaGVpZ2h0XHJcblx0XHR0ZXh0QWxpZ24gQ0VOVEVSLENFTlRFUlxyXG5cdFx0cmVjdCBAbGVmdCAqIHdpZHRoLDAsd2lkdGggKiAoQHJpZ2h0LUBsZWZ0KSxoZWlnaHRcclxuXHRcdGZjIDBcclxuXHRcdHRleHQgQG5hbWUsICAgICAgICAgICAgICAgICAgIHdpZHRoICogQG1pZGRsZSwgMC4wNSAqIGhlaWdodFxyXG5cdFx0dGV4dCBAc3RhcnQsICAgICAgICAgICAgICAgICAgd2lkdGggKiBAbWlkZGxlLCAwLjE1ICogaGVpZ2h0XHJcblx0XHR0ZXh0IEB0YXJnZXQsICAgICAgICAgICAgICAgICB3aWR0aCAqIEBtaWRkbGUsIDAuMjAgKiBoZWlnaHRcclxuXHRcdHRleHQgbGV2ZWwgLSBAaGlzdG9yeS5sZW5ndGgsIHdpZHRoICogQG1pZGRsZSwgMC4zMCAqIGhlaWdodFxyXG5cdFx0dGV4dCBAdGlkLzEwMDAsICAgICAgICAgICAgICAgd2lkdGggKiBAbWlkZGxlLCAwLjQwICogaGVpZ2h0XHJcblxyXG5cdG9wZXJhdGUgOiAobmV3VmFsdWUpIC0+XHJcblx0XHRAY291bnQrK1xyXG5cdFx0QGhpc3RvcnkucHVzaCBAc3RhcnRcclxuXHRcdEBzdGFydCA9IG5ld1ZhbHVlXHJcblx0XHRpZiBAc3RhcnQgPT0gQHRhcmdldCB0aGVuIEBzdG9wcFRpZCA9IG5ldyBEYXRlKClcclxuXHJcblx0Y2xpY2sgOiAoaW5kZXgpIC0+XHJcblx0XHRpZiBAc3RhcnQgPT0gQHRhcmdldCB0aGVuIHJldHVyblxyXG5cdFx0aWYgaW5kZXg9PTAgYW5kIEBoaXN0b3J5Lmxlbmd0aCA+IDAgdGhlbiBAc3RhcnQgPSBAaGlzdG9yeS5wb3AoKVxyXG5cdFx0aWYgaW5kZXg9PTEgdGhlblx0QG9wZXJhdGUgQHN0YXJ0ICsgMlxyXG5cdFx0aWYgaW5kZXg9PTIgdGhlblx0QG9wZXJhdGUgQHN0YXJ0ICogMlxyXG5cdFx0aWYgaW5kZXg9PTMgYW5kIEBzdGFydCAlIDIgPT0gMCB0aGVuIEBvcGVyYXRlIEBzdGFydCAvIDJcclxuXHRcdGlmIEBzdGFydCA9PSBAdGFyZ2V0XHJcblx0XHRcdEBzdG9wcFRpZCA9IG5ldyBEYXRlKClcclxuXHRcdFx0QHRpZCA9IEBzdG9wcFRpZCAtIEBzdGFydFRpZCArIDEwMDAwICogQGNvdW50ICNoaXN0b3J5Lmxlbmd0aFxyXG5cclxuY3JlYXRlVGFyZ2V0ID0gKGxldmVsLCBzdGFydCkgLT5cclxuXHRvcCA9IChucikgLT4gaWYgbnIgbm90IGluIHZpc2l0ZWQgdGhlbiBiLnB1c2ggbnJcclxuXHRhID0gW3N0YXJ0XVxyXG5cdHZpc2l0ZWQgPSBbc3RhcnRdXHJcblx0Zm9yIGkgaW4gcmFuZ2UgbGV2ZWxcclxuXHRcdGIgPSBbXVxyXG5cdFx0Zm9yIG5yIGluIGFcclxuXHRcdFx0b3AgbnIgKyAyXHJcblx0XHRcdG9wIG5yICogMlxyXG5cdFx0XHRpZiBuciAlIDIgPT0gMCB0aGVuIG9wIG5yIC8gMlxyXG5cdFx0YiA9IF8udW5pcSBiXHJcblx0XHR2aXNpdGVkID0gdmlzaXRlZC5jb25jYXQgYlxyXG5cdFx0W2EsYl0gPSBbYixhXVxyXG5cdGFbbXlSYW5kaW50IDAsYS5sZW5ndGgtMV1cclxuXHJcbnNldHVwID0gLT5cclxuXHRjcmVhdGVDYW52YXMgd2luZG93V2lkdGgsd2luZG93SGVpZ2h0XHJcblx0bmV3R2FtZSAxXHJcblxyXG5kcmF3ID0gLT5cclxuXHRiZyAxXHJcblx0Zm9yIHBsYXllciBpbiBwbGF5ZXJzXHJcblx0XHRwbGF5ZXIuZHJhdygpXHJcblx0Zm9yIGJ1dHRvbiBpbiBidXR0b25zXHJcblx0XHRidXR0b24uZHJhdygpXHJcblxyXG5uZXdHYW1lID0gKGRlbHRhKSAtPlxyXG5cdGxldmVsICs9IGRlbHRhXHJcblx0aWYgbGV2ZWwgPT0gMCB0aGVuIGxldmVsID0gMVxyXG5cdHN0YXJ0VGlkID0gbmV3IERhdGUoKVxyXG5cdHN0YXJ0ID0gbXlSYW5kaW50IDEsMjBcclxuXHR0YXJnZXQgPSBjcmVhdGVUYXJnZXQgbGV2ZWwsIHN0YXJ0XHJcblx0cGxheWVycyA9IFtdXHJcblx0cGxheWVycy5wdXNoIG5ldyBQbGF5ZXIgc3RhcnQsdGFyZ2V0LDAuMDAsMC4xMCwgXCIjZmYwXCIsICdBbGV4J1xyXG5cdHBsYXllcnMucHVzaCBuZXcgUGxheWVyIHN0YXJ0LHRhcmdldCwwLjEwLDAuMjAsIFwiI2YwMFwiLCAnTG93ZSdcclxuXHRwbGF5ZXJzLnB1c2ggbmV3IFBsYXllciBzdGFydCx0YXJnZXQsMC4yMCwwLjMwLCBcIiNmMGZcIiwgJ01hcmsnXHJcblx0cGxheWVycy5wdXNoIG5ldyBQbGF5ZXIgc3RhcnQsdGFyZ2V0LDAuMzAsMC40MCwgXCIjMGZmXCIsICdUaW0nXHJcblx0cGxheWVycy5wdXNoIG5ldyBQbGF5ZXIgc3RhcnQsdGFyZ2V0LDAuNDAsMC41MCwgXCIjZmYwXCIsICdDaHJpc3RlcidcclxuXHRwbGF5ZXJzLnB1c2ggbmV3IFBsYXllciBzdGFydCx0YXJnZXQsMC41MCwwLjYwLCBcIiNmMDBcIiwgJ0YnXHJcblx0cGxheWVycy5wdXNoIG5ldyBQbGF5ZXIgc3RhcnQsdGFyZ2V0LDAuNjAsMC43MCwgXCIjZjBmXCIsICdHJ1xyXG5cdHBsYXllcnMucHVzaCBuZXcgUGxheWVyIHN0YXJ0LHRhcmdldCwwLjcwLDAuODAsIFwiIzBmZlwiLCAnSCdcclxuXHRwbGF5ZXJzLnB1c2ggbmV3IFBsYXllciBzdGFydCx0YXJnZXQsMC44MCwwLjkwLCBcIiNmMGZcIiwgJ0knXHJcblx0cGxheWVycy5wdXNoIG5ldyBQbGF5ZXIgc3RhcnQsdGFyZ2V0LDAuOTAsMS4wMCwgXCIjMGZmXCIsICdKJ1xyXG5cclxua2V5UHJlc3NlZCA9IC0+IFxyXG5cdGlmIGtleSA9PSAnICcgdGhlbiBuZXdHYW1lIDAgXHJcblx0aWYga2V5IGluICd1VSsnIHRoZW4gbmV3R2FtZSAxXHJcblx0aWYga2V5IGluICdkRC0nIHRoZW4gbmV3R2FtZSAtMVxyXG5cclxubW91c2VQcmVzc2VkID0gLT5cclxuXHRmb3IgYnV0dG9uIGluIGJ1dHRvbnNcclxuXHRcdGlmIGJ1dHRvbi5pbnNpZGUgbW91c2VYLG1vdXNlWSB0aGVuIGJ1dHRvbi5jbGljaygpXHJcbiJdfQ==
//# sourceURL=c:\github\ShortCutCD\coffee\sketch.coffee