// Generated by CoffeeScript 2.4.1
// W    A    S    D
// up   left down right
// undo +2   *2   /2
var Player, createNumbers, draw, keyPressed, level, players, setup;

level = 1;

Player = class Player {
  constructor(start1, target1, left, right, bg, keys) {
    this.start = start1;
    this.target = target1;
    this.left = left;
    this.right = right;
    this.bg = bg;
    this.keys = keys;
    this.history = [];
    this.tid = 0;
    this.middle = (this.left + this.right) / 2;
    this.startTid = new Date();
  }

  //@stoppTid = new Date()
  draw() {
    fill(this.bg);
    textSize(30);
    textAlign(CENTER, CENTER);
    rect(this.left * width, 0, width / 2, height);
    fc(0);
    text(this.start, width * (this.middle - 0.10), 0.2 * height);
    text(this.target, width * (this.middle + 0.10), 0.2 * height);
    text(this.history.length, width * (this.middle - 0.10), 0.4 * height);
    text(this.tid / 1000, width * (this.middle + 0.10), 0.4 * height);
    return this.help();
  }

  help() {
    var key, lst;
    textSize(0.05 * height);
    lst = (function() {
      var j, len, ref, results;
      ref = this.keys;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        key = ref[j];
        results.push(key.replace(/Arrow/g, ""));
      }
      return results;
    }).call(this);
    text("Undo: " + lst[0], width * this.middle, 0.6 * height);
    text("+2: " + lst[1], width * (this.middle - 0.15), 0.8 * height);
    text("*2: " + lst[2], width * this.middle, 0.8 * height);
    return text("/2: " + lst[3], width * (this.middle + 0.15), 0.8 * height);
  }

  operate(newValue) {
    this.history.push(this.start);
    this.start = newValue;
    if (this.start === this.target) {
      return this.stoppTid = new Date();
    }
  }

  click(key) {
    if (this.start === this.target) {
      return;
    }
    key = key.toUpperCase();
    if (key === this.keys[0].toUpperCase() && this.history.length > 0) {
      this.start = this.history.pop();
    }
    if (key === this.keys[1].toUpperCase()) {
      this.operate(this.start + 2);
    }
    if (key === this.keys[2].toUpperCase()) {
      this.operate(this.start * 2);
    }
    if (key === this.keys[3].toUpperCase() && this.start % 2 === 0) {
      this.operate(this.start / 2);
    }
    if (this.start === this.target) {
      this.stoppTid = new Date();
      return this.tid = this.stoppTid - this.startTid + 10000 * this.history.length;
    }
  }

};

//timestart = new Date()
players = [];

createNumbers = function(level, start) {
  var i, j, k, len, len1, lst0, lst1, number, ref;
  lst0 = [start];
  ref = range(level);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    //console.log lst0
    lst1 = [];
    for (k = 0, len1 = lst0.length; k < len1; k++) {
      number = lst0[k];
      lst1.push(number + 2);
      lst1.push(number * 2);
      if (number % 2 === 0) {
        lst1.push(number / 2);
      }
    }
    lst1 = _.uniq(lst1);
    [lst0, lst1] = [lst1, lst0];
  }
  return [start, _.sample(lst0)];
};

setup = function() {
  var start, startTid, target;
  createCanvas(windowWidth, windowHeight);
  startTid = new Date();
  level = 3;
  [start, target] = createNumbers(level, _.random(1, 20));
  players.push(new Player(start, target, 0.00, 0.50, "#ff0", "W A S D".split(' '))); // ["W","A","S","D"]
  return players.push(new Player(start, target, 0.50, 1.00, "#f00", "ArrowUp ArrowLeft ArrowDown ArrowRight".split(' ')));
};

//timestart = new Date()
draw = function() {
  var j, len, player, results;
//bg 0.5
  results = [];
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    results.push(player.draw());
  }
  return results;
};

keyPressed = function() {
  var j, len, player, results;
  console.log(keyCode, key);
  results = [];
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    results.push(player.click(key));
  }
  return results;
};


// + * /
// 3    Start
// 5    6                                1 operation
// 7    10         8        12 (3)       2 operationer
// 9 14 12 20 (5) (10) 16 4 (14) 24 (6)  3 operationer

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\ShortCutCD\coffee\sketch.coffee