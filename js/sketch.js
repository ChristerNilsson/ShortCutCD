// Generated by CoffeeScript 2.4.1
var ADD, CHOICES, COLS, COST, DIV, MAX, MUL, PLAYERS, Player, ROWS, createTarget, draw, keyPressed, level, myRound, newGame, players, setup, solution, target;

ROWS = 3;

COLS = 4;

CHOICES = [];

ADD = 2;

MUL = 2;

DIV = 2;

MAX = 20;

COST = 10;

PLAYERS = 12;

level = 1;

players = [];

target = 0;

solution = null;

Player = class Player {
  constructor(start1, row1, col1, keys1) {
    this.start = start1;
    this.row = row1;
    this.col = col1;
    this.keys = keys1;
    this.bg = (this.row + this.col) % 2 === 0 ? "#ff0" : "#f00";
    this.w = width * 0.25;
    this.left = this.w * this.col;
    this.xmiddle = this.left + this.w / 2;
    this.h = height * 0.25;
    this.up = this.h * this.row;
    this.ymiddle = this.up + this.h / 2;
    this.history = [];
    this.tid = 0;
    this.startTid = new Date();
    this.index = 0;
  }

  draw() {
    if (this.start === target) {
      fill("#0f0");
      textSize(0.05 * height);
      textAlign(CENTER, CENTER);
      sc(0);
      rect(this.left, this.up, this.w, this.h);
      fc(0);
      sc();
      text(this.keys, this.xmiddle, this.ymiddle);
      return text(this.tid, this.xmiddle, this.ymiddle + 0.25 * this.h);
    } else {
      fill(this.bg);
      textSize(0.05 * height);
      textAlign(CENTER, CENTER);
      sc(0);
      rect(this.left, this.up, this.w, this.h);
      fc(0);
      sc();
      text(this.start, this.xmiddle, this.ymiddle - 0.25 * this.h);
      text(this.keys, this.xmiddle, this.ymiddle);
      return text(CHOICES[this.index], this.xmiddle, this.ymiddle + 0.25 * this.h);
    }
  }

  operate(newValue) {
    this.history.push(this.start);
    this.start = newValue;
    if (this.start === target) {
      return this.stoppTid = new Date();
    }
  }

  click(key) {
    var keys;
    if (this.start === target) {
      return;
    }
    keys = _.clone(this.keys);
    key = key.toUpperCase();
    if (key === keys[0].toUpperCase()) {
      this.index = (this.index + 1) % CHOICES.length;
    }
    if (key === keys[1].toUpperCase()) {
      if (this.index === 0 && this.history.length > 0) {
        this.start = this.history.pop();
      }
      if (this.index === 1) {
        this.operate(this.start + ADD);
      }
      if (this.index === 2) {
        this.operate(this.start * MUL);
      }
      if (this.index === 3 && this.start % DIV === 0) {
        this.operate(this.start / DIV);
      }
    }
    if (this.start === target) {
      this.stoppTid = new Date();
      return this.tid = myRound((this.stoppTid - this.startTid) / 1000 + COST * this.history.length, 3);
    }
  }

};

myRound = function(x, n) {
  return round(x * 10 ** n) / 10 ** n;
};

createTarget = function(level, start) {
  var a, b, comeFrom, i, j, k, len, len1, nr, op, ref, result;
  op = function(from, nr) {
    if (!(nr in comeFrom)) {
      b.push(nr);
      return comeFrom[nr] = from;
    }
  };
  a = [start];
  comeFrom = {};
  comeFrom[start] = 0;
  ref = range(level);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    b = [];
    for (k = 0, len1 = a.length; k < len1; k++) {
      nr = a[k];
      op(nr, nr + ADD);
      op(nr, nr * MUL);
      if (nr % DIV === 0) {
        op(nr, nr / DIV);
      }
    }
    a = _.uniq(b);
  }
  target = _.sample(a);
  result = [];
  while (target !== 0) {
    result.unshift(target);
    target = comeFrom[target];
  }
  return result;
};

newGame = function(delta = 0) {
  var col, i, j, keys, len, ref, results, row, start, startTid;
  players = [];
  level += delta;
  if (level < 1) {
    level = 1;
  }
  startTid = new Date();
  start = _.random(1, MAX);
  solution = createTarget(level, start);
  target = _.last(solution);
  keys = 'QWERTYUIASDFGHJKZXCVBNM,';
  ref = range(PLAYERS);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    row = floor(i / 4);
    col = i % 4;
    results.push(players.push(new Player(start, row, col, keys[2 * i] + keys[2 * i + 1])));
  }
  return results;
};

setup = function() {
  var params;
  createCanvas(windowWidth, windowHeight);
  params = _.extend({
    ADD: 2,
    MUL: 2,
    DIV: 2,
    MAX: 20,
    COST: 10,
    PLAYERS: 12
  }, getParameters());
  ADD = int(params.ADD);
  MUL = int(params.MUL);
  DIV = int(params.DIV);
  MAX = int(params.MAX);
  COST = int(params.COST);
  PLAYERS = int(params.PLAYERS);
  CHOICES = `undo +${ADD} *${MUL} /${DIV}`.split(' ');
  return newGame();
};

draw = function() {
  var j, len, player;
  bg(1);
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    player.draw();
  }
  sc();
  text(target, width * 0.5, 0.75 * height + 0.33 * players[0].h);
  return text(`level: ${level}`, width * 0.5, 0.75 * height + 0.67 * players[0].h);
};

keyPressed = function() {
  var j, len, player, results;
  if (key === 'Enter') {
    return console.log(solution);
  } else if (key === "ArrowUp") {
    return newGame(1);
  } else if (key === "ArrowDown") {
    return newGame(-1);
  } else {
    results = [];
    for (j = 0, len = players.length; j < len; j++) {
      player = players[j];
      results.push(player.click(key));
    }
    return results;
  }
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\ShortCutCD\coffee\sketch.coffee