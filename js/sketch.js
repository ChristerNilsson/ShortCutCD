// Generated by CoffeeScript 2.4.1
var Button, KEYS, PLAYERS, Player, buttons, createTarget, d, draw, fract, keyPressed, level, mousePressed, myRandint, myRandom, newGame, players, seed, setup,
  indexOf = [].indexOf;

PLAYERS = 'Alex Lowe Mark Tim Christer F G H I J'.split(' ');

KEYS = "undo +2 *2 /2".split(' ');

level = 0;

players = [];

buttons = [];

// to make this multiplayer with Browser Preview
d = new Date();

seed = 60 * d.getHours() + d.getMinutes();

fract = function(x) {
  return x - Math.floor(x);
};

myRandom = function() {
  return fract(10000 * Math.sin(seed++));
};

myRandint = function(a, b) {
  return int(a + (b - a) * myRandom());
};

Button = class Button {
  constructor(x1, y, prompt, click) {
    this.x = x1;
    this.y = y;
    this.prompt = prompt;
    this.click = click;
    this.x *= width;
    this.y *= height;
    this.r = 0.07 * height;
  }

  draw() {
    fc();
    sc(0);
    circle(this.x, this.y, this.r);
    fc(0);
    sc();
    return text(this.prompt, this.x, this.y);
  }

  inside(mx, my) {
    return dist(mx, my, this.x, this.y) < this.r;
  }

};

Player = class Player {
  constructor(start1, target1, left, right, bg1, name1) {
    var x;
    this.start = start1;
    this.target = target1;
    this.left = left;
    this.right = right;
    this.bg = bg1;
    this.name = name1;
    this.history = [];
    this.tid = 0;
    this.middle = (this.left + this.right) / 2;
    this.startTid = new Date();
    x = this.middle;
    this.count = 0;
    buttons.push(new Button(x, 0.51, KEYS[0], () => {
      return this.click(0);
    }));
    buttons.push(new Button(x, 0.65, KEYS[1], () => {
      return this.click(1);
    }));
    buttons.push(new Button(x, 0.79, KEYS[2], () => {
      return this.click(2);
    }));
    buttons.push(new Button(x, 0.93, KEYS[3], () => {
      return this.click(3);
    }));
  }

  draw() {
    if (this.start === this.target) {
      fill("#0f0");
    } else {
      fill(this.bg);
    }
    textSize(0.04 * height);
    textAlign(CENTER, CENTER);
    rect(this.left * width, 0, width * (this.right - this.left), height);
    fc(0);
    text(this.name, width * this.middle, 0.05 * height);
    text(this.start, width * this.middle, 0.15 * height);
    text(this.target, width * this.middle, 0.20 * height);
    text(level - this.history.length, width * this.middle, 0.30 * height);
    return text(this.tid / 1000, width * this.middle, 0.40 * height);
  }

  operate(newValue) {
    this.count++;
    this.history.push(this.start);
    this.start = newValue;
    if (this.start === this.target) {
      return this.stoppTid = new Date();
    }
  }

  click(index) {
    if (this.start === this.target) {
      return;
    }
    if (index === 0 && this.history.length > 0) {
      this.start = this.history.pop();
    }
    if (index === 1) {
      this.operate(this.start + 2);
    }
    if (index === 2) {
      this.operate(this.start * 2);
    }
    if (index === 3 && this.start % 2 === 0) {
      this.operate(this.start / 2);
    }
    if (this.start === this.target) {
      this.stoppTid = new Date();
      return this.tid = this.stoppTid - this.startTid + 10000 * this.count; //history.length
    }
  }

};

createTarget = function(level, start) {
  var a, b, i, j, k, len, len1, nr, op, ref, visited;
  op = function(nr) {
    if (indexOf.call(visited, nr) < 0) {
      return b.push(nr);
    }
  };
  a = [start];
  visited = [start];
  ref = range(level);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    b = [];
    for (k = 0, len1 = a.length; k < len1; k++) {
      nr = a[k];
      op(nr + 2);
      op(nr * 2);
      if (nr % 2 === 0) {
        op(nr / 2);
      }
    }
    b = _.uniq(b);
    visited = visited.concat(b);
    [a, b] = [b, a];
  }
  return a[myRandint(0, a.length - 1)];
};

setup = function() {
  createCanvas(windowWidth, windowHeight);
  return newGame(1);
};

draw = function() {
  var button, j, k, len, len1, player, results;
  bg(1);
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    player.draw();
  }
  results = [];
  for (k = 0, len1 = buttons.length; k < len1; k++) {
    button = buttons[k];
    results.push(button.draw());
  }
  return results;
};

newGame = function(delta) {
  var c, i, j, len, name, results, start, startTid, target;
  level += delta;
  if (level === 0) {
    level = 1;
  }
  startTid = new Date();
  start = myRandint(1, 20);
  target = createTarget(level, start);
  players = [];
  results = [];
  for (i = j = 0, len = PLAYERS.length; j < len; i = ++j) {
    name = PLAYERS[i];
    console.log(i, name);
    if (i % 2 === 0) {
      c = "#ff0";
    } else {
      c = "#f00";
    }
    results.push(players.push(new Player(start, target, i * 0.1, (i + 1) * 0.1, c, name)));
  }
  return results;
};

keyPressed = function() {
  if (key === ' ') {
    newGame(0);
  }
  if (indexOf.call('uU+', key) >= 0) {
    newGame(1);
  }
  if (indexOf.call('dD-', key) >= 0) {
    return newGame(-1);
  }
};

mousePressed = function() {
  var button, j, len, results;
  results = [];
  for (j = 0, len = buttons.length; j < len; j++) {
    button = buttons[j];
    if (button.inside(mouseX, mouseY)) {
      results.push(button.click());
    } else {
      results.push(void 0);
    }
  }
  return results;
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\ShortCutCD\coffee\sketch.coffee