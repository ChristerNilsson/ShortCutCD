// Generated by CoffeeScript 2.4.1
var CHOICES, COLS, Player, ROWS, createTarget, draw, keyPressed, level, myRound, newGame, players, setup;

ROWS = 3;

COLS = 4;

CHOICES = 'undo +2 *2 /2'.split(' ');

level = 1;

players = [];

Player = class Player {
  constructor(start1, target1, row1, col1, keys1) {
    this.start = start1;
    this.target = target1;
    this.row = row1;
    this.col = col1;
    this.keys = keys1;
    this.bg = (this.row + this.col) % 2 === 0 ? "#ff0" : "#f00";
    this.w = width * 0.25;
    this.left = this.w * this.col;
    this.xmiddle = this.left + this.w / 2;
    this.h = height * 0.25;
    this.up = this.h * this.row;
    this.ymiddle = this.up + this.h / 2;
    this.history = [];
    this.tid = 0;
    this.startTid = new Date();
    this.index = 0;
  }

  draw() {
    if (this.start === this.target) {
      fill("#0f0");
      textSize(0.05 * height);
      textAlign(CENTER, CENTER);
      sc(0);
      rect(this.left, this.up, this.w, this.h);
      fc(0);
      text(this.keys, this.xmiddle, this.ymiddle);
      return text(this.tid, this.xmiddle, this.ymiddle + 50);
    } else {
      fill(this.bg);
      textSize(0.05 * height);
      textAlign(CENTER, CENTER);
      sc(0);
      rect(this.left, this.up, this.w, this.h);
      fc(0);
      text(this.start, this.xmiddle, this.ymiddle - 50);
      text(this.keys, this.xmiddle, this.ymiddle);
      return text(CHOICES[this.index], this.xmiddle, this.ymiddle + 50);
    }
  }

  operate(newValue) {
    this.history.push(this.start);
    this.start = newValue;
    if (this.start === this.target) {
      return this.stoppTid = new Date();
    }
  }

  click(key) {
    var keys;
    if (this.start === this.target) {
      return;
    }
    keys = _.clone(this.keys);
    key = key.toUpperCase();
    if (key === keys[0].toUpperCase()) {
      this.index = (this.index + 1) % CHOICES.length;
    }
    if (key === keys[1].toUpperCase()) {
      if (this.index === 0 && this.history.length > 0) {
        this.start = this.history.pop();
      }
      if (this.index === 1) {
        this.operate(this.start + 2);
      }
      if (this.index === 2) {
        this.operate(this.start * 2);
      }
      if (this.index === 3 && this.start % 2 === 0) {
        this.operate(this.start / 2);
      }
    }
    if (this.start === this.target) {
      this.stoppTid = new Date();
      return this.tid = myRound((this.stoppTid - this.startTid) / 1000 + 10 * this.history.length, 3);
    }
  }

};

myRound = function(x, n) {
  return round(x * 10 ** n) / 10 ** n;
};

createTarget = function(level, start) {
  var a, b, comeFrom, i, j, k, len, len1, nr, op, ref, result, target;
  op = function(from, nr) {
    if (!(nr in comeFrom)) {
      b.push(nr);
      return comeFrom[nr] = from;
    }
  };
  a = [start];
  comeFrom = {};
  comeFrom[start] = 0;
  ref = range(level);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    b = [];
    for (k = 0, len1 = a.length; k < len1; k++) {
      nr = a[k];
      op(nr, nr + 2);
      op(nr, nr * 2);
      if (nr % 2 === 0) {
        op(nr, nr / 2);
      }
    }
    a = _.uniq(b);
  }
  target = _.sample(a);
  result = [];
  while (target !== 0) {
    result.unshift(target);
    target = comeFrom[target];
  }
  return result;
};

newGame = function(delta = 0) {
  var col, index, j, keys, len, ref, results, row, solution, start, startTid, target;
  players = [];
  level += delta;
  if (level < 1) {
    level = 1;
  }
  startTid = new Date();
  start = _.random(1, 20);
  solution = createTarget(level, start);
  target = _.last(solution);
  keys = 'QWERTYUIASDFGHJKZXCVBNM,';
  ref = range(ROWS);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    row = ref[j];
    results.push((function() {
      var k, len1, ref1, results1;
      ref1 = range(COLS);
      results1 = [];
      for (k = 0, len1 = ref1.length; k < len1; k++) {
        col = ref1[k];
        index = COLS * row + col;
        results1.push(players.push(new Player(start, target, row, col, keys[2 * index] + keys[2 * index + 1])));
      }
      return results1;
    })());
  }
  return results;
};

setup = function() {
  createCanvas(windowWidth, windowHeight);
  return newGame();
};

draw = function() {
  var j, len, player;
  bg(1);
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    player.draw();
  }
  sc();
  text(players[0].target, width * 0.5, 0.8 * height);
  return text(`level: ${level}`, width * 0.5, 0.9 * height);
};

keyPressed = function() {
  var j, len, player, results;
  if (key === "ArrowUp") {
    return newGame(1);
  } else if (key === "ArrowDown") {
    return newGame(-1);
  } else {
    results = [];
    for (j = 0, len = players.length; j < len; j++) {
      player = players[j];
      results.push(player.click(key));
    }
    return results;
  }
};

// + * /
// 7    Start {7:0}
// 9    14                                1 operation   {7:0, 9:7, 14:7}
// 11    18         16        28 (7)      2 operationer {7:0, 9:7, 14:7, 11:9, 18:9, 16:14, 28:14}
// 13 22 20 36 (9) (18) 32 8 30 56 (14)   3 operationer {7:0, 9:7, 14:7, 11:9, 18:9, 16:14, 28:14, 13:11, 22:11, 20:18, 36:16, 32:16, 8:16, 30:28, 56:28}

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\ShortCutCD\coffee\sketch.coffee