// Generated by CoffeeScript 2.4.1
  // W    A    S    D
  // up   left down right
  // undo +2   *2   /2
var Player, createTarget, draw, hlp, keyPressed, level, players, setup,
  indexOf = [].indexOf;

level = 1;

players = [];

Player = class Player {
  constructor(start1, target1, left, right, bg1, keys1) {
    this.start = start1;
    this.target = target1;
    this.left = left;
    this.right = right;
    this.bg = bg1;
    this.keys = keys1;
    this.history = [];
    this.tid = 0;
    this.middle = (this.left + this.right) / 2;
    this.startTid = new Date();
  }

  draw() {
    var x1, x2, y1, y2;
    fill(this.bg);
    textSize(0.05 * height);
    textAlign(CENTER, CENTER);
    rect(this.left * width, 0, width * (this.right - this.left), height);
    fc(0);
    x1 = this.middle - 0.05;
    x2 = this.middle + 0.05;
    y1 = 0.2;
    y2 = 0.4;
    text(this.start, width * this.middle, y1 * height);
    text(level - this.history.length, width * x1, y2 * height);
    text(this.tid / 1000, width * x2, y2 * height);
    return this.help();
  }

  help() {
    return hlp(this.keys, this.middle);
  }

  operate(newValue) {
    this.history.push(this.start);
    this.start = newValue;
    if (this.start === this.target) {
      return this.stoppTid = new Date();
    }
  }

  click(key) {
    var keys;
    keys = _.clone(this.keys);
    if (keys[0] === "🡑") {
      keys[0] = "ArrowUp"; // 🡑 🡐 🡓 🡒
    }
    if (keys[1] === "🡐") {
      keys[1] = "ArrowLeft";
    }
    if (keys[2] === "🡓") {
      keys[2] = "ArrowDown";
    }
    if (keys[3] === "🡒") {
      keys[3] = "ArrowRight";
    }
    if (this.start === this.target) {
      return;
    }
    key = key.toUpperCase();
    if (key === keys[0].toUpperCase() && this.history.length > 0) {
      this.start = this.history.pop();
    }
    if (key === keys[1].toUpperCase()) {
      this.operate(this.start + 2);
    }
    if (key === keys[2].toUpperCase()) {
      this.operate(this.start * 2);
    }
    if (key === keys[3].toUpperCase() && this.start % 2 === 0) {
      this.operate(this.start / 2);
    }
    if (this.start === this.target) {
      this.stoppTid = new Date();
      return this.tid = this.stoppTid - this.startTid + 10000 * this.history.length;
    }
  }

};

hlp = function(keys, middle) {
  var x1, x2, x3, y1, y2;
  textSize(0.05 * height);
  x1 = middle - 0.05;
  x2 = middle;
  x3 = middle + 0.05;
  y1 = 0.6;
  y2 = 0.8;
  text(keys[0], width * x2, y1 * height);
  text(keys[1], width * x1, y2 * height);
  text(keys[2], width * x2, y2 * height);
  return text(keys[3], width * x3, y2 * height);
};

createTarget = function(level, start) {
  var a, b, i, j, k, len, len1, nr, op, ref, visited;
  op = function(nr) {
    if (indexOf.call(visited, nr) < 0) {
      return b.push(nr);
    }
  };
  a = [start];
  visited = [start];
  ref = range(level);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    b = [];
    for (k = 0, len1 = a.length; k < len1; k++) {
      nr = a[k];
      op(nr + 2);
      op(nr * 2);
      if (nr % 2 === 0) {
        op(nr / 2);
      }
    }
    b = _.uniq(b);
    visited = visited.concat(b);
    [a, b] = [b, a];
  }
  return _.sample(a);
};

setup = function() {
  var start, startTid, target;
  createCanvas(windowWidth, windowHeight);
  startTid = new Date();
  level = 3;
  start = _.random(1, 20);
  target = createTarget(level, start);
  players.push(new Player(start, target, 0.00, 0.20, "#ff0", "W A S D".split(' ')));
  players.push(new Player(start, target, 0.20, 0.40, "#f00", "T F G H".split(' ')));
  players.push(new Player(start, target, 0.60, 0.80, "#0f0", "I J K L".split(' ')));
  return players.push(new Player(start, target, 0.80, 1.00, "#0ff", "🡑 🡐 🡓 🡒".split(' ')));
};

draw = function() {
  var j, len, player;
  bg(1);
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    player.draw();
  }
  sc();
  hlp("Undo +2 *2 /2".split(' '), 0.5); // ["Undo", '+2',,,]
  return text(players[0].target, width * 0.5, 0.2 * height);
};

keyPressed = function() {
  var j, len, player, results;
  results = [];
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    results.push(player.click(key));
  }
  return results;
};

// + * /
// 7    Start
// 9    14                                1 operation
// 11    18         16        28 (7)      2 operationer
// 13 22 20 36 (9) (18) 32 8 30 56 (14)   3 operationer

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\ShortCutCD\coffee\sketch.coffee