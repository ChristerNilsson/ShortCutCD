// Generated by CoffeeScript 2.4.1
var ADD, CHOICES, COLS, COST, DIV, MAX, MUL, PLAYERS, Player, ROWS, createTarget, draw, keyPressed, level, myRound, newGame, players, setup, target;

ROWS = 3;

COLS = 4;

CHOICES = [];

ADD = 2;

MUL = 2;

DIV = 2;

MAX = 20;

COST = 10;

PLAYERS = 12;

level = 1;

players = [];

target = 0;

Player = class Player {
  constructor(start1, row1, col1, keys1) {
    this.start = start1;
    this.row = row1;
    this.col = col1;
    this.keys = keys1;
    this.bg = (this.row + this.col) % 2 === 0 ? "#ff0" : "#f00";
    this.w = width * 0.25;
    this.left = this.w * this.col;
    this.xmiddle = this.left + this.w / 2;
    this.h = height * 0.25;
    this.up = this.h * this.row;
    this.ymiddle = this.up + this.h / 2;
    this.history = [];
    this.tid = 0;
    this.startTid = new Date();
    this.index = 0;
  }

  draw() {
    if (this.start === target) {
      fill("#0f0");
      textSize(0.05 * height);
      textAlign(CENTER, CENTER);
      sc(0);
      rect(this.left, this.up, this.w, this.h);
      fc(0);
      text(this.keys, this.xmiddle, this.ymiddle);
      return text(this.tid, this.xmiddle, this.ymiddle + 50);
    } else {
      fill(this.bg);
      textSize(0.05 * height);
      textAlign(CENTER, CENTER);
      sc(0);
      rect(this.left, this.up, this.w, this.h);
      fc(0);
      text(this.start, this.xmiddle, this.ymiddle - 50);
      text(this.keys, this.xmiddle, this.ymiddle);
      return text(CHOICES[this.index], this.xmiddle, this.ymiddle + 50);
    }
  }

  operate(newValue) {
    this.history.push(this.start);
    this.start = newValue;
    if (this.start === target) {
      return this.stoppTid = new Date();
    }
  }

  click(key) {
    var keys;
    if (this.start === target) {
      return;
    }
    keys = _.clone(this.keys);
    key = key.toUpperCase();
    if (key === keys[0].toUpperCase()) {
      this.index = (this.index + 1) % CHOICES.length;
    }
    if (key === keys[1].toUpperCase()) {
      if (this.index === 0 && this.history.length > 0) {
        this.start = this.history.pop();
      }
      if (this.index === 1) {
        this.operate(this.start + ADD);
      }
      if (this.index === 2) {
        this.operate(this.start * MUL);
      }
      if (this.index === 3 && this.start % DIV === 0) {
        this.operate(this.start / DIV);
      }
    }
    if (this.start === target) {
      this.stoppTid = new Date();
      return this.tid = myRound((this.stoppTid - this.startTid) / 1000 + COST * this.history.length, 3);
    }
  }

};

myRound = function(x, n) {
  return round(x * 10 ** n) / 10 ** n;
};

createTarget = function(level, start) {
  var a, b, comeFrom, i, j, k, len, len1, nr, op, ref, result;
  op = function(from, nr) {
    if (!(nr in comeFrom)) {
      b.push(nr);
      return comeFrom[nr] = from;
    }
  };
  a = [start];
  comeFrom = {};
  comeFrom[start] = 0;
  ref = range(level);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    b = [];
    for (k = 0, len1 = a.length; k < len1; k++) {
      nr = a[k];
      op(nr, nr + ADD);
      op(nr, nr * MUL);
      if (nr % DIV === 0) {
        op(nr, nr / DIV);
      }
    }
    a = _.uniq(b);
  }
  target = _.sample(a);
  result = [];
  while (target !== 0) {
    result.unshift(target);
    target = comeFrom[target];
  }
  return result;
};

newGame = function(delta = 0) {
  var col, i, j, keys, len, ref, results, row, solution, start, startTid;
  players = [];
  level += delta;
  if (level < 1) {
    level = 1;
  }
  startTid = new Date();
  start = _.random(1, MAX);
  solution = createTarget(level, start);
  target = _.last(solution);
  keys = 'QWERTYUIASDFGHJKZXCVBNM,';
  ref = range(PLAYERS);
  results = [];
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    row = floor(i / 4);
    col = i % 4;
    results.push(players.push(new Player(start, row, col, keys[2 * i] + keys[2 * i + 1])));
  }
  return results;
};

setup = function() {
  var params;
  createCanvas(windowWidth, windowHeight);
  params = _.extend({
    ADD: 2,
    MUL: 2,
    DIV: 2,
    MAX: 2,
    COST: 10,
    PLAYERS: 12
  }, getParameters());
  ADD = int(params.ADD);
  MUL = int(params.MUL);
  DIV = int(params.DIV);
  MAX = int(params.MAX);
  COST = int(params.COST);
  PLAYERS = int(params.PLAYERS);
  CHOICES = `undo +${ADD} *${MUL} /${DIV}`.split(' ');
  return newGame();
};

draw = function() {
  var j, len, player;
  bg(1);
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    player.draw();
  }
  sc();
  text(target, width * 0.5, 0.8 * height);
  return text(`level: ${level}`, width * 0.5, 0.9 * height);
};

keyPressed = function() {
  var j, len, player, results;
  if (key === "ArrowUp") {
    return newGame(1);
  } else if (key === "ArrowDown") {
    return newGame(-1);
  } else {
    results = [];
    for (j = 0, len = players.length; j < len; j++) {
      player = players[j];
      results.push(player.click(key));
    }
    return results;
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2tldGNoLmpzIiwic291cmNlUm9vdCI6Ii4uIiwic291cmNlcyI6WyJjb2ZmZWVcXHNrZXRjaC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxHQUFBLEVBQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUEsSUFBQSxFQUFBLFlBQUEsRUFBQSxJQUFBLEVBQUEsVUFBQSxFQUFBLEtBQUEsRUFBQSxPQUFBLEVBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxLQUFBLEVBQUE7O0FBQUEsSUFBQSxHQUFPOztBQUNQLElBQUEsR0FBTzs7QUFDUCxPQUFBLEdBQVU7O0FBRVYsR0FBQSxHQUFNOztBQUNOLEdBQUEsR0FBTTs7QUFDTixHQUFBLEdBQU07O0FBQ04sR0FBQSxHQUFNOztBQUNOLElBQUEsR0FBTzs7QUFDUCxPQUFBLEdBQVU7O0FBRVYsS0FBQSxHQUFROztBQUNSLE9BQUEsR0FBVTs7QUFDVixNQUFBLEdBQVM7O0FBRUgsU0FBTixNQUFBLE9BQUE7RUFDQyxXQUFjLE9BQUEsTUFBQSxNQUFBLE9BQUEsQ0FBQTtJQUFDLElBQUMsQ0FBQTtJQUFPLElBQUMsQ0FBQTtJQUFLLElBQUMsQ0FBQTtJQUFLLElBQUMsQ0FBQTtJQUNuQyxJQUFDLENBQUEsRUFBRCxHQUFTLENBQUMsSUFBQyxDQUFBLEdBQUQsR0FBSyxJQUFDLENBQUEsR0FBUCxDQUFBLEdBQWMsQ0FBZCxLQUFtQixDQUF0QixHQUE2QixNQUE3QixHQUF5QztJQUUvQyxJQUFDLENBQUEsQ0FBRCxHQUFLLEtBQUEsR0FBUTtJQUNiLElBQUMsQ0FBQSxJQUFELEdBQVEsSUFBQyxDQUFBLENBQUQsR0FBSyxJQUFDLENBQUE7SUFDZCxJQUFDLENBQUEsT0FBRCxHQUFXLElBQUMsQ0FBQSxJQUFELEdBQVEsSUFBQyxDQUFBLENBQUQsR0FBSztJQUV4QixJQUFDLENBQUEsQ0FBRCxHQUFL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LEdBQU8sR0FBQSxDQUFJLE1BQU0sQ0FBQyxJQUFYO0VBQ1AsT0FBQSxHQUFVLEdBQUEsQ0FBSSxNQUFNLENBQUMsT0FBWDtFQUNWLE9BQUEsR0FBVSxDQUFBLE1BQUEsQ0FBQSxDQUFTLEdBQVQsQ0FBYSxFQUFiLENBQUEsQ0FBaUIsR0FBakIsQ0FBcUIsRUFBckIsQ0FBQSxDQUF5QixHQUF6QixDQUFBLENBQThCLENBQUMsS0FBL0IsQ0FBcUMsR0FBckM7U0FDVixPQUFBLENBQUE7QUFWTzs7QUFZUixJQUFBLEdBQU8sUUFBQSxDQUFBLENBQUE7QUFDTixNQUFBLENBQUEsRUFBQSxHQUFBLEVBQUE7RUFBQSxFQUFBLENBQUcsQ0FBSDtFQUNjLEtBQUEseUNBQUE7O0lBQWQsTUFBTSxDQUFDLElBQVAsQ0FBQTtFQUFjO0VBQ2QsRUFBQSxDQUFBO0VBQ0EsSUFBQSxDQUFLLE1BQUwsRUFBYSxLQUFBLEdBQVEsR0FBckIsRUFBMEIsR0FBQSxHQUFJLE1BQTlCO1NBQ0EsSUFBQSxDQUFLLENBQUEsT0FBQSxDQUFBLENBQVUsS0FBVixDQUFBLENBQUwsRUFBd0IsS0FBQSxHQUFRLEdBQWhDLEVBQXFDLEdBQUEsR0FBSSxNQUF6QztBQUxNOztBQU9QLFVBQUEsR0FBYSxRQUFBLENBQUEsQ0FBQTtBQUNaLE1BQUEsQ0FBQSxFQUFBLEdBQUEsRUFBQSxNQUFBLEVBQUE7RUFBQSxJQUFHLEdBQUEsS0FBTyxTQUFWO1dBQXlCLE9BQUEsQ0FBUSxDQUFSLEVBQXpCO0dBQUEsTUFDSyxJQUFHLEdBQUEsS0FBTyxXQUFWO1dBQTJCLE9BQUEsQ0FBUSxDQUFDLENBQVQsRUFBM0I7R0FBQSxNQUFBO0FBQ2lCO0lBQUEsS0FBQSx5Q0FBQTs7bUJBQWpCLE1BQU0sQ0FBQyxLQUFQLENBQWEsR0FBYjtJQUFpQixDQUFBO21CQURqQjs7QUFGTyIsInNvdXJjZXNDb250ZW50IjpbIlJPV1MgPSAzXHJcbkNPTFMgPSA0XHJcbkNIT0lDRVMgPSBbXSBcclxuXHJcbkFERCA9IDJcclxuTVVMID0gMlxyXG5ESVYgPSAyXHJcbk1BWCA9IDIwXHJcbkNPU1QgPSAxMFxyXG5QTEFZRVJTID0gMTJcclxuXHJcbmxldmVsID0gMVxyXG5wbGF5ZXJzID0gW11cclxudGFyZ2V0ID0gMFxyXG5cclxuY2xhc3MgUGxheWVyXHJcblx0Y29uc3RydWN0b3IgOiAoQHN0YXJ0LCBAcm93LCBAY29sLCBAa2V5cykgLT5cclxuXHRcdEBiZyA9IGlmIChAcm93K0Bjb2wpICUgMiA9PSAwIHRoZW4gXCIjZmYwXCIgZWxzZSBcIiNmMDBcIlxyXG5cclxuXHRcdEB3ID0gd2lkdGggKiAwLjI1XHJcblx0XHRAbGVmdCA9IEB3ICogQGNvbCBcclxuXHRcdEB4bWlkZGxlID0gQGxlZnQgKyBAdyAvIDJcclxuXHJcblx0XHRAaCA9IGhlaWdodCAqIDAuMjVcclxuXHRcdEB1cCA9IEBoICogQHJvd1xyXG5cdFx0QHltaWRkbGUgPSBAdXAgKyBAaCAvIDJcclxuXHJcblx0XHRAaGlzdG9yeSA9IFtdXHJcblx0XHRAdGlkID0gMFxyXG5cdFx0QHN0YXJ0VGlkID0gbmV3IERhdGUoKVxyXG5cclxuXHRcdEBpbmRleCA9IDBcclxuXHJcblx0ZHJhdyA6IC0+XHJcblx0XHRpZiBAc3RhcnQgPT0gdGFyZ2V0XHJcblx0XHRcdGZpbGwgXCIjMGYwXCJcclxuXHRcdFx0dGV4dFNpemUgMC4wNSpoZWlnaHRcclxuXHRcdFx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHRcdFx0c2MgMFxyXG5cdFx0XHRyZWN0IEBsZWZ0LEB1cCxAdyxAaFxyXG5cdFx0XHRmYyAwXHJcblx0XHRcdHRleHQgQGtleXMsIEB4bWlkZGxlLCBAeW1pZGRsZVxyXG5cdFx0XHR0ZXh0IEB0aWQsICBAeG1pZGRsZSwgQHltaWRkbGUrNTBcclxuXHRcdGVsc2VcclxuXHRcdFx0ZmlsbCBAYmdcclxuXHRcdFx0dGV4dFNpemUgMC4wNSpoZWlnaHRcclxuXHRcdFx0dGV4dEFsaWduIENFTlRFUixDRU5URVJcclxuXHRcdFx0c2MgMFxyXG5cdFx0XHRyZWN0IEBsZWZ0LEB1cCxAdyxAaFxyXG5cdFx0XHRmYyAwXHJcblx0XHRcdHRleHQgQHN0YXJ0LCAgICAgICAgICAgQHhtaWRkbGUsIEB5bWlkZGxlLTUwXHJcblx0XHRcdHRleHQgQGtleXMsICAgICAgICAgICAgQHhtaWRkbGUsIEB5bWlkZGxlXHJcblx0XHRcdHRleHQgQ0hPSUNFU1tAaW5kZXhdLCBAeG1pZGRsZSwgQHltaWRkbGUrNTBcclxuXHJcblx0b3BlcmF0ZSA6IChuZXdWYWx1ZSkgLT5cclxuXHRcdEBoaXN0b3J5LnB1c2ggQHN0YXJ0XHJcblx0XHRAc3RhcnQgPSBuZXdWYWx1ZVxyXG5cdFx0aWYgQHN0YXJ0ID09IHRhcmdldCB0aGVuIEBzdG9wcFRpZCA9IG5ldyBEYXRlKClcclxuXHJcblx0Y2xpY2sgOiAoa2V5KSAtPlxyXG5cdFx0aWYgQHN0YXJ0ID09IHRhcmdldCB0aGVuIHJldHVyblx0XHRcclxuXHRcdGtleXMgPSBfLmNsb25lIEBrZXlzXHJcblx0XHRrZXkgPSBrZXkudG9VcHBlckNhc2UoKVxyXG5cdFx0aWYga2V5ID09IGtleXNbMF0udG9VcHBlckNhc2UoKSB0aGVuIEBpbmRleCA9IChAaW5kZXggKyAxKSAlIENIT0lDRVMubGVuZ3RoXHJcblx0XHRpZiBrZXkgPT0ga2V5c1sxXS50b1VwcGVyQ2FzZSgpIFxyXG5cdFx0XHRpZiBAaW5kZXggPT0gMCBhbmQgQGhpc3RvcnkubGVuZ3RoID4gMCB0aGVuIEBzdGFydCA9IEBoaXN0b3J5LnBvcCgpXHJcblx0XHRcdGlmIEBpbmRleCA9PSAxIHRoZW5cdEBvcGVyYXRlIEBzdGFydCArIEFERFxyXG5cdFx0XHRpZiBAaW5kZXggPT0gMiB0aGVuXHRAb3BlcmF0ZSBAc3RhcnQgKiBNVUxcclxuXHRcdFx0aWYgQGluZGV4ID09IDMgYW5kIEBzdGFydCAlIERJViA9PSAwIHRoZW4gQG9wZXJhdGUgQHN0YXJ0IC8gRElWXHJcblxyXG5cdFx0aWYgQHN0YXJ0ID09IHRhcmdldFxyXG5cdFx0XHRAc3RvcHBUaWQgPSBuZXcgRGF0ZSgpXHJcblx0XHRcdEB0aWQgPSBteVJvdW5kIChAc3RvcHBUaWQgLSBAc3RhcnRUaWQpLzEwMDAgKyBDT1NUICogQGhpc3RvcnkubGVuZ3RoLCAzXHJcblxyXG5teVJvdW5kID0gKHgsbikgLT4gcm91bmQoeCoxMCoqbikvMTAqKm5cclxuXHJcbmNyZWF0ZVRhcmdldCA9IChsZXZlbCwgc3RhcnQpIC0+XHJcblx0b3AgPSAoZnJvbSxucikgLT5cclxuXHRcdGlmIG5yIG5vdCBvZiBjb21lRnJvbVxyXG5cdFx0XHRiLnB1c2ggbnJcclxuXHRcdFx0Y29tZUZyb21bbnJdID0gZnJvbVxyXG5cdGEgPSBbc3RhcnRdXHJcblx0Y29tZUZyb20gPSB7fVxyXG5cdGNvbWVGcm9tW3N0YXJ0XSA9IDBcclxuXHRmb3IgaSBpbiByYW5nZSBsZXZlbFxyXG5cdFx0YiA9IFtdXHJcblx0XHRmb3IgbnIgaW4gYVxyXG5cdFx0XHRvcCBucixuciArIEFERCBcclxuXHRcdFx0b3AgbnIsbnIgKiBNVUxcclxuXHRcdFx0aWYgbnIgJSBESVYgPT0gMCB0aGVuIG9wIG5yLG5yIC8gRElWXHJcblx0XHRhID0gXy51bmlxIGJcclxuXHR0YXJnZXQgPSBfLnNhbXBsZSBhXHJcblx0cmVzdWx0ID0gW11cclxuXHR3aGlsZSB0YXJnZXQgIT0gMFxyXG5cdFx0cmVzdWx0LnVuc2hpZnQgdGFyZ2V0XHJcblx0XHR0YXJnZXQgPSBjb21lRnJvbVt0YXJnZXRdXHJcblx0cmVzdWx0XHJcblxyXG5uZXdHYW1lID0gKGRlbHRhPTApIC0+XHJcblx0cGxheWVycyA9IFtdXHJcblx0bGV2ZWwgKz0gZGVsdGFcclxuXHRpZiBsZXZlbCA8IDEgdGhlbiBsZXZlbCA9IDFcclxuXHRzdGFydFRpZCA9IG5ldyBEYXRlKClcclxuXHRzdGFydCA9IF8ucmFuZG9tIDEsTUFYXHJcblx0c29sdXRpb24gPSBjcmVhdGVUYXJnZXQgbGV2ZWwsIHN0YXJ0XHJcblx0dGFyZ2V0ID0gXy5sYXN0IHNvbHV0aW9uXHJcblx0a2V5cyA9ICdRV0VSVFlVSUFTREZHSEpLWlhDVkJOTSwnXHJcblx0Zm9yIGkgaW4gcmFuZ2UgUExBWUVSU1xyXG5cdFx0cm93ID0gZmxvb3IgaSAvIDRcclxuXHRcdGNvbCA9IGkgJSA0XHJcblx0XHRwbGF5ZXJzLnB1c2ggbmV3IFBsYXllciBzdGFydCxyb3csY29sLCBrZXlzWzIqaV0gKyBrZXlzWzIqaSsxXVxyXG5cclxuc2V0dXAgPSAtPlxyXG5cdGNyZWF0ZUNhbnZhcyB3aW5kb3dXaWR0aCx3aW5kb3dIZWlnaHRcclxuXHRwYXJhbXMgPSBfLmV4dGVuZCB7QUREOjIsIE1VTDoyLCBESVY6MiwgTUFYOjIsIENPU1Q6MTAsIFBMQVlFUlM6MTJ9LCBnZXRQYXJhbWV0ZXJzKClcclxuXHRBREQgPSBpbnQgcGFyYW1zLkFERFxyXG5cdE1VTCA9IGludCBwYXJhbXMuTVVMXHJcblx0RElWID0gaW50IHBhcmFtcy5ESVZcclxuXHRNQVggPSBpbnQgcGFyYW1zLk1BWFxyXG5cdENPU1QgPSBpbnQgcGFyYW1zLkNPU1RcclxuXHRQTEFZRVJTID0gaW50IHBhcmFtcy5QTEFZRVJTXHJcblx0Q0hPSUNFUyA9IFwidW5kbyArI3tBRER9ICoje01VTH0gLyN7RElWfVwiLnNwbGl0ICcgJ1xyXG5cdG5ld0dhbWUoKVxyXG5cclxuZHJhdyA9IC0+XHJcblx0YmcgMVxyXG5cdHBsYXllci5kcmF3KCkgZm9yIHBsYXllciBpbiBwbGF5ZXJzXHJcblx0c2MoKVxyXG5cdHRleHQgdGFyZ2V0LCB3aWR0aCAqIDAuNSwgMC44KmhlaWdodFxyXG5cdHRleHQgXCJsZXZlbDogI3tsZXZlbH1cIiwgd2lkdGggKiAwLjUsIDAuOSpoZWlnaHRcclxuXHJcbmtleVByZXNzZWQgPSAtPiBcclxuXHRpZiBrZXkgPT0gXCJBcnJvd1VwXCIgdGhlbiBuZXdHYW1lIDFcclxuXHRlbHNlIGlmIGtleSA9PSBcIkFycm93RG93blwiIHRoZW4gbmV3R2FtZSAtMVxyXG5cdGVsc2UgcGxheWVyLmNsaWNrIGtleSBmb3IgcGxheWVyIGluIHBsYXllcnNcclxuIl19
//# sourceURL=c:\github\ShortCutCD\coffee\sketch.coffee