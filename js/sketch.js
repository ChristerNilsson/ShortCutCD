// Generated by CoffeeScript 2.4.1
// W    A    S    D
// up   left down right
// undo +2   *2   /2
var Player, createTarget, draw, keyPressed, level, players, setup;

level = 1;

players = [];

Player = class Player {
  constructor(start1, target1, left, right, bg, keys) {
    this.start = start1;
    this.target = target1;
    this.left = left;
    this.right = right;
    this.bg = bg;
    this.keys = keys;
    this.history = [];
    this.tid = 0;
    this.middle = (this.left + this.right) / 2;
    this.startTid = new Date();
  }

  draw() {
    var x1, x2, y1, y2;
    fill(this.bg);
    textSize(30);
    textAlign(CENTER, CENTER);
    rect(this.left * width, 0, width / 2, height);
    fc(0);
    x1 = this.middle - 0.1;
    x2 = this.middle + 0.1;
    y1 = 0.2;
    y2 = 0.4;
    text(this.start, width * x1, y1 * height);
    text(this.target, width * x2, y1 * height);
    text(this.history.length, width * x1, y2 * height);
    text(this.tid / 1000, width * x2, y2 * height);
    return this.help();
  }

  help() {
    var key, lst, x1, x2, x3, y1, y2;
    textSize(0.05 * height);
    lst = (function() {
      var j, len, ref, results;
      ref = this.keys;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        key = ref[j];
        results.push(key.replace("Arrow", ""));
      }
      return results;
    }).call(this);
    x1 = this.middle - 0.15;
    x2 = this.middle;
    x3 = this.middle + 0.15;
    y1 = 0.6;
    y2 = 0.8;
    text("Undo: " + lst[0], width * x2, y1 * height);
    text("+2: " + lst[1], width * x1, y2 * height);
    text("*2: " + lst[2], width * x2, y2 * height);
    return text("/2: " + lst[3], width * x3, y2 * height);
  }

  operate(newValue) {
    this.history.push(this.start);
    this.start = newValue;
    if (this.start === this.target) {
      return this.stoppTid = new Date();
    }
  }

  click(key) {
    if (this.start === this.target) {
      return;
    }
    key = key.toUpperCase();
    if (key === this.keys[0].toUpperCase() && this.history.length > 0) {
      this.start = this.history.pop();
    }
    if (key === this.keys[1].toUpperCase()) {
      this.operate(this.start + 2);
    }
    if (key === this.keys[2].toUpperCase()) {
      this.operate(this.start * 2);
    }
    if (key === this.keys[3].toUpperCase() && this.start % 2 === 0) {
      this.operate(this.start / 2);
    }
    if (this.start === this.target) {
      this.stoppTid = new Date();
      return this.tid = this.stoppTid - this.startTid + 10000 * this.history.length;
    }
  }

};

createTarget = function(level, start) {
  var a, b, i, j, k, len, len1, nr, ref;
  a = [start];
  ref = range(level);
  for (j = 0, len = ref.length; j < len; j++) {
    i = ref[j];
    b = [];
    for (k = 0, len1 = a.length; k < len1; k++) {
      nr = a[k];
      b.push(nr + 2);
      b.push(nr * 2);
      if (nr % 2 === 0) {
        b.push(nr / 2);
      }
    }
    b = _.uniq(b);
    [a, b] = [b, a];
  }
  return _.sample(a);
};

setup = function() {
  var start, startTid, target;
  createCanvas(windowWidth, windowHeight);
  startTid = new Date();
  level = 3;
  start = _.random(1, 20);
  target = createTarget(level, start);
  players.push(new Player(start, target, 0.00, 0.50, "#ff0", "W A S D".split(' ')));
  return players.push(new Player(start, target, 0.50, 1.00, "#f00", "ArrowUp ArrowLeft ArrowDown ArrowRight".split(' ')));
};

draw = function() {
  var j, len, player, results;
  results = [];
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    results.push(player.draw());
  }
  return results;
};

keyPressed = function() {
  var j, len, player, results;
  results = [];
  for (j = 0, len = players.length; j < len; j++) {
    player = players[j];
    results.push(player.click(key));
  }
  return results;
};

// + * /
// 3    Start
// 5    6                                1 operation
// 7    10         8        12 (3)       2 operationer
// 9 14 12 20 (5) (10) 16 4 (14) 24 (6)  3 operationer

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=c:\github\ShortCutCD\coffee\sketch.coffee